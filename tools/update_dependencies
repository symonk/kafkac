#!/usr/bin/env bash
# Update Python project dependencies using uv

set -euo pipefail

# Colors for nice output
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
RED="\033[1;31m"
RESET="\033[0m"

echo -e "${GREEN}🚀 Updating Python project dependencies with uv...${RESET}"

# Check if uv is installed
if ! command -v uv &> /dev/null; then
    echo -e "${RED}❌ uv is not installed.${RESET}"
    echo "Install it first: curl -LsSf https://astral.sh/uv/install.sh | sh"
    exit 1
fi

# Detect if there is a uv project (pyproject.toml)
if [ ! -f "pyproject.toml" ]; then
    echo -e "${RED}❌ No pyproject.toml found in current directory.${RESET}"
    exit 1
fi

# Make sure the environment is synced before updating
echo -e "${YELLOW}📦 Syncing environment...${RESET}"
uv sync

# Update all dependencies to latest compatible versions
echo -e "${YELLOW}⬆️  Updating dependencies...${RESET}"
uv lock --upgrade

# Alternatively, for project-managed dependencies (recommended):
# uv lock --upgrade
# uv sync

# Clean up any unused dependencies (optional)
# echo -e "${YELLOW}🧹 Cleaning unused packages...${RESET}"
# uv pip check
# uv pip freeze > requirements.txt  # if you maintain a requirements file

echo -e "${GREEN}✅ Dependencies updated successfully!${RESET}"
